---
- name: Check if first time setup
  stat:
    path: /home/{{host_username}}/.dotfiles
  register: dotfiles_folder

- name: Ensure repositories
  dnf:
    name:
      - fedora-workstation-repositories
    state: present
  become: yes
  tags: [ repos fedora ]

# Make sure relevant system and desktop support packages are installed.
- name: Ensure base system packages
  package:
    name:
      - 'fd-find'
      - cmake
      - cronie
      - curl
      - flatpak
      - fzf
      - git
      - git-extras
      - htop
      - make
      - openssh
      - openssh-server
      - starship
      - unzip
      - wget
      - whois
      - zip
      - zoxide
      - zsh
    state: present
  tags: [ packages ]
  become: yes

- name: Ensure Gnome packages
  package:
    name:
      - gnome-tweaks
      - gnome-extensions-app
      - gnome-shell-extension-gsconnect
      - gnome-shell-extension-dash-to-dock
      - papirus-icon-theme
    state: latest
  become: yes
  tags: [ gnome ] 
 
- name: Ensure Gnome packages removed
  package:
    name:
      - gnome-shell-extension-background-logo
      - vifm
    state: absent
  become: yes
  tags: [ gnome ] 

- name: Ensure desktop packages
  package:
    name:
      - google-chrome-stable
    state: present
    enablerepo: 
      - google-chrome
  become: yes
  tags: [ packages ]

- name: Ensure software development packages
  package:
    name:
      - neovim
      - gcc-c++
      - ripgrep
      - fzf
      - tmux
      - nodejs
      - python3
      - python3-pip
    state: present
  become: yes
  tags: [ packages ]

- name: Ensure flathub repo
  shell: >
    flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
  become: yes

- name: Ensure nvm for Nodejs
  shell: >
    curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh | bash
  args:
    creates: "/home/{{ host_username }}/.nvm/nvm.sh"

# Install python extra packages and ensure they are up to date.
- name: Ensure pip3 packages
  pip:
    name: '{{item}}'
    executable: pip3
    state: latest
  loop:
    - pipenv
  become: yes

- name: Ensure Node global packages (npm)
  npm:
    name: '{{item}}'
    global: yes
    state: latest
    production: yes
  loop:
    - '@bitwarden/cli'
  changed_when: false # ignore
  become: yes

# Make sure system services we explicitly need are running and enabled.
- name: Enable and start system services
  service:
    name: '{{item}}'
    state: started
    enabled: yes
  loop:
    - crond
  become: yes

#
# Configs
#
- name: Ensure default directories in home
  file:
    path: '{{item}}'
    state: directory
    mode: '0774'
    owner: '{{host_username}}'
    group: '{{host_username}}'
  loop:
      - '/home/{{host_username}}/.ssh'
      - '/home/{{host_username}}/.dotfiles'
      - '/home/{{host_username}}/dev'
  become: yes

# Set up ansible-pull
- name: Add ansible user
  become: true
  user:
    name: ansiblebot
    system: yes

- name: Set up sudo for ansible user
  become: true
  copy:
    src: files/sudoer_ansiblebot
    dest: /etc/sudoers.d/ansiblebot
    owner: root
    group: root
    mode: 0440

- name: Add ansible-pull cron job
  become: true
  cron:
   name: ansible auto-provision
   user: root
   minute: "*/10"
   job: "/usr/bin/ansible-pull -o --track-subs -U https://gitlab.com/martin.goerz/ansible-desktop.git > /var/log/ansible_bot.log"

# Dotfiles
- include_role:
    name: jan_matthis.git_dotfiles
  
- name: Reset owner of directories
  file:
    path: '{{item}}'
    owner: "{{host_username}}"
    group: "{{host_username}}"
    state: directory
    mode: '0755'
    recurse: yes
  loop:
    - '/home/{{host_username}}/'
#    - '/home/{{host_username}}/.config'
#    - '/home/{{host_username}}/.dotfiles'
#    - '/home/{{host_username}}/.local/share/fonts'
#    - '/home/{{host_username}}/.bashrc'
  become: yes


- name: Restore all files on first time setup
  when: not dotfiles_folder.stat.exists
  block:
    - name: Unstage all missing files in dotfile repository
      command:
        cmd: 'git --git-dir=/home/{{host_username}}/.dotfiles/ --work-tree=/home/{{host_username}}/ reset'

    - name: Restore missing files from dotifle repository
      command:
        cmd: 'git --git-dir=/home/{{host_username}}/.dotfiles/ --work-tree=/home/{{host_username}}/ restore /home/{{host_username}}/'

    - name: change upstream 
      command:
        cmd: 'git --git-dir=/home/{{host_username}}/.dotfiles/ --work-tree=/home/{{host_username}}/ remote set-url --push origin git@gitlab.com:martin.goerz/dotfiles.git'


# Global gitignore 
- name: Global gitignore 
  git_config:
    name: core.excludesfile
    value: '$HOME/.config/.gitignore_global'
    scope: global

# Show Untracked Files no
- name: Show Untracked Files no
  git_config:
    name: status.showUntrackedFiles
    repo: '/home/{{host_username}}/.dotfiles'
    value: "no"
    scope: local

- name: Remove bash clutter
  file:
    path: {{item}}
    owner: '{{host_username}}'
    group: '{{host_username}}'
    state: absent
  loop:
    - '/home/{{host_username}}/.bash_profile'
    - '/home/{{host_username}}/.bash_history'
    - '/home/{{host_username}}/.bash_logout'
  become: yes

#
# Install NVChad
#
#- name: Ensure nvim is a git repo
#  stat:
#    path: /home/{{host_username}}/.config/nvim/.git/HEAD
#  register: nvim_head
#
#- name: Remove nvim folder if not a repo
#  file:
#    path: /home/{{host_username}}/.config/nvim
#    owner: '{{host_username}}'
#    group: '{{host_username}}'
#    state: absent
#  when: not nvim_head.stat.exists
#
#- name: Install NVChad
#  git:
#    repo: "https://github.com/NvChad/NvChad"
#    dest: "/home/{{host_username}}/.config/nvim"
#  when: not nvim_head.stat.exists
#
#- name: Find all files in nvchad
#  find:
#    paths: /home/{{host_username}}/.config/nvchad/
#  register: nvchad
#
#- name: Create symlinks to nvchad custom folder
#  file:
#    src: "{{ item.path }}"
#    path: "/home/{{host_username}}/.config/nvim/lua/custom/{{ item.path | basename }}"
#    state: link
#  with_items: 
#    - chadrc.lua
#    - init.lua
#  when: not nvchad.stat.exists
#

# Ensure DCONF profile is present on the system. This deals with desktop customization and defaults.
- name: Configure DCONF
  file:
    path: /etc/dconf/profile
    state: directory
    mode: '0755'
    owner: root
    group: root
  become: yes

- name: Ensure dconf settings in .config
  file:
    path: /home/{{host_username}}/.config/dconf_back
    state: file
  become: yes

- name: Copy dconf user profile config
  copy:
    src: dconf_profile_user
    dest: /etc/dconf/profile/user
    mode: '0644'
    owner: root
    group: root
  become: yes

- name: Create /etc/dconf/db/local.d
  file:
    path: /etc/dconf/db/local.d
    state: directory
    mode: '0755'
    owner: root
    group: root
  become: yes

- name: Update dconf settings
  copy:
    src: /home/{{host_username}}/.config/dconf_back
    dest: /etc/dconf/db/local.d/00-global
    mode: '0644'
    owner: root
    group: root
  notify: [ Update dconf ]
  become: yes
# END

# zsh
#
# - name: Install Starship
#   script:
#     cmd: "curl -s https://api.github.com/repos/starship/starship/releases/latest | grep browser_download_url | grep x86_64-unknown-linux-gnu  | cut -d '\"' -f 4  | wget -qi -"
#     changed_when: false # ignore
#   become: yes
#
# - name: Install oh-my-zsh for root
#   script:
#     cmd: 'scripts/oh-my-zsh-setup.sh --unattended --keep-zshrc'
#     creates: '/root/.oh-my-zsh'
#   changed_when: false # ignore
#   become: yes
# 
# - name: Install oh-my-zsh for self
#   script:
#     cmd: 'scripts/oh-my-zsh-setup.sh --unattended --keep-zshrc'
#     chdir: '/home/{{host_username}}'
#     creates: '/home/{{host_username}}/.oh-my-zsh'
#   changed_when: false # ignore

# - name: Install pyenv for own user
#   script:
#     cmd: 'scripts/pyenv-setup.sh'
#     chdir: '/home/{{host_username}}'
#     creates: '/home/{{host_username}}/.pyenv'
#   changed_when: false # ignore

# - name: Ensure system files
#   copy:
#     src: '{{item.src}}'
#     dest: '{{item.dest}}'
#     mode: '0644'
#     owner: root
#     group: root
#   loop:
#     - { src: menu-icon.svg, dest: /etc/menu-icon.svg } # Used by Arc Menu GNOME extension.
#     - { src: wallpaper.png, dest: /etc/wallpaper.png } # System default wallpaper
#     - { src: issue, dest: /etc/issue } # System banner
#     - { src: issue.net, dest: /etc/issue.net } # System banner - for network clients
#     - { src: motd, dest: /etc/motd } # User motd
#   become: yes
# - name: Create a 2048-bit SSH key for user jsmith in ~jsmith/.ssh/id_rsa
  # ansible.builtin.user:
  #   name: jsmith
  #   generate_ssh_key: yes
  #   ssh_key_bits: 2048
  #   ssh_key_file: .ssh/id_rsa
